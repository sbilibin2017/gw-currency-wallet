// Code generated by MockGen. DO NOT EDIT.
// Source: /home/sergey/Github/gw-currency-wallet/internal/handlers/balance.go

// Package handlers is a generated GoMock package.
package handlers

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	jwt "github.com/sbilibin2017/gw-currency-wallet/internal/jwt"
)

// MockBalanceTokener is a mock of BalanceTokener interface.
type MockBalanceTokener struct {
	ctrl     *gomock.Controller
	recorder *MockBalanceTokenerMockRecorder
}

// MockBalanceTokenerMockRecorder is the mock recorder for MockBalanceTokener.
type MockBalanceTokenerMockRecorder struct {
	mock *MockBalanceTokener
}

// NewMockBalanceTokener creates a new mock instance.
func NewMockBalanceTokener(ctrl *gomock.Controller) *MockBalanceTokener {
	mock := &MockBalanceTokener{ctrl: ctrl}
	mock.recorder = &MockBalanceTokenerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBalanceTokener) EXPECT() *MockBalanceTokenerMockRecorder {
	return m.recorder
}

// GetClaims mocks base method.
func (m *MockBalanceTokener) GetClaims(ctx context.Context, tokenString string) (*jwt.Claims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClaims", ctx, tokenString)
	ret0, _ := ret[0].(*jwt.Claims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClaims indicates an expected call of GetClaims.
func (mr *MockBalanceTokenerMockRecorder) GetClaims(ctx, tokenString interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClaims", reflect.TypeOf((*MockBalanceTokener)(nil).GetClaims), ctx, tokenString)
}

// GetTokenFromRequest mocks base method.
func (m *MockBalanceTokener) GetTokenFromRequest(ctx context.Context, r *http.Request) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokenFromRequest", ctx, r)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTokenFromRequest indicates an expected call of GetTokenFromRequest.
func (mr *MockBalanceTokenerMockRecorder) GetTokenFromRequest(ctx, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokenFromRequest", reflect.TypeOf((*MockBalanceTokener)(nil).GetTokenFromRequest), ctx, r)
}

// MockWalletReader is a mock of WalletReader interface.
type MockWalletReader struct {
	ctrl     *gomock.Controller
	recorder *MockWalletReaderMockRecorder
}

// MockWalletReaderMockRecorder is the mock recorder for MockWalletReader.
type MockWalletReaderMockRecorder struct {
	mock *MockWalletReader
}

// NewMockWalletReader creates a new mock instance.
func NewMockWalletReader(ctrl *gomock.Controller) *MockWalletReader {
	mock := &MockWalletReader{ctrl: ctrl}
	mock.recorder = &MockWalletReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWalletReader) EXPECT() *MockWalletReaderMockRecorder {
	return m.recorder
}

// GetByUserID mocks base method.
func (m *MockWalletReader) GetByUserID(ctx context.Context, userID uuid.UUID) (map[string]float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserID", ctx, userID)
	ret0, _ := ret[0].(map[string]float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserID indicates an expected call of GetByUserID.
func (mr *MockWalletReaderMockRecorder) GetByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserID", reflect.TypeOf((*MockWalletReader)(nil).GetByUserID), ctx, userID)
}
