// Code generated by MockGen. DO NOT EDIT.
// Source: /home/sergey/Github/gw-currency-wallet/internal/handlers/exchange_rate.go

// Package handlers is a generated GoMock package.
package handlers

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	jwt "github.com/sbilibin2017/gw-currency-wallet/internal/jwt"
)

// MockExchangeRatesTokener is a mock of ExchangeRatesTokener interface.
type MockExchangeRatesTokener struct {
	ctrl     *gomock.Controller
	recorder *MockExchangeRatesTokenerMockRecorder
}

// MockExchangeRatesTokenerMockRecorder is the mock recorder for MockExchangeRatesTokener.
type MockExchangeRatesTokenerMockRecorder struct {
	mock *MockExchangeRatesTokener
}

// NewMockExchangeRatesTokener creates a new mock instance.
func NewMockExchangeRatesTokener(ctrl *gomock.Controller) *MockExchangeRatesTokener {
	mock := &MockExchangeRatesTokener{ctrl: ctrl}
	mock.recorder = &MockExchangeRatesTokenerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExchangeRatesTokener) EXPECT() *MockExchangeRatesTokenerMockRecorder {
	return m.recorder
}

// GetClaims mocks base method.
func (m *MockExchangeRatesTokener) GetClaims(ctx context.Context, tokenString string) (*jwt.Claims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClaims", ctx, tokenString)
	ret0, _ := ret[0].(*jwt.Claims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClaims indicates an expected call of GetClaims.
func (mr *MockExchangeRatesTokenerMockRecorder) GetClaims(ctx, tokenString interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClaims", reflect.TypeOf((*MockExchangeRatesTokener)(nil).GetClaims), ctx, tokenString)
}

// GetTokenFromRequest mocks base method.
func (m *MockExchangeRatesTokener) GetTokenFromRequest(ctx context.Context, r *http.Request) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokenFromRequest", ctx, r)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTokenFromRequest indicates an expected call of GetTokenFromRequest.
func (mr *MockExchangeRatesTokenerMockRecorder) GetTokenFromRequest(ctx, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokenFromRequest", reflect.TypeOf((*MockExchangeRatesTokener)(nil).GetTokenFromRequest), ctx, r)
}

// MockExchangeRatesReader is a mock of ExchangeRatesReader interface.
type MockExchangeRatesReader struct {
	ctrl     *gomock.Controller
	recorder *MockExchangeRatesReaderMockRecorder
}

// MockExchangeRatesReaderMockRecorder is the mock recorder for MockExchangeRatesReader.
type MockExchangeRatesReaderMockRecorder struct {
	mock *MockExchangeRatesReader
}

// NewMockExchangeRatesReader creates a new mock instance.
func NewMockExchangeRatesReader(ctrl *gomock.Controller) *MockExchangeRatesReader {
	mock := &MockExchangeRatesReader{ctrl: ctrl}
	mock.recorder = &MockExchangeRatesReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExchangeRatesReader) EXPECT() *MockExchangeRatesReaderMockRecorder {
	return m.recorder
}

// GetExchangeRates mocks base method.
func (m *MockExchangeRatesReader) GetExchangeRates(ctx context.Context) (float32, float32, float32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExchangeRates", ctx)
	ret0, _ := ret[0].(float32)
	ret1, _ := ret[1].(float32)
	ret2, _ := ret[2].(float32)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetExchangeRates indicates an expected call of GetExchangeRates.
func (mr *MockExchangeRatesReaderMockRecorder) GetExchangeRates(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExchangeRates", reflect.TypeOf((*MockExchangeRatesReader)(nil).GetExchangeRates), ctx)
}
