// Code generated by MockGen. DO NOT EDIT.
// Source: /home/sergey/Github/gw-currency-wallet/internal/handlers/exchange.go

// Package handlers is a generated GoMock package.
package handlers

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	jwt "github.com/sbilibin2017/gw-currency-wallet/internal/jwt"
)

// MockExchangeRateForCurrencyTokener is a mock of ExchangeRateForCurrencyTokener interface.
type MockExchangeRateForCurrencyTokener struct {
	ctrl     *gomock.Controller
	recorder *MockExchangeRateForCurrencyTokenerMockRecorder
}

// MockExchangeRateForCurrencyTokenerMockRecorder is the mock recorder for MockExchangeRateForCurrencyTokener.
type MockExchangeRateForCurrencyTokenerMockRecorder struct {
	mock *MockExchangeRateForCurrencyTokener
}

// NewMockExchangeRateForCurrencyTokener creates a new mock instance.
func NewMockExchangeRateForCurrencyTokener(ctrl *gomock.Controller) *MockExchangeRateForCurrencyTokener {
	mock := &MockExchangeRateForCurrencyTokener{ctrl: ctrl}
	mock.recorder = &MockExchangeRateForCurrencyTokenerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExchangeRateForCurrencyTokener) EXPECT() *MockExchangeRateForCurrencyTokenerMockRecorder {
	return m.recorder
}

// GetClaims mocks base method.
func (m *MockExchangeRateForCurrencyTokener) GetClaims(ctx context.Context, tokenString string) (*jwt.Claims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClaims", ctx, tokenString)
	ret0, _ := ret[0].(*jwt.Claims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClaims indicates an expected call of GetClaims.
func (mr *MockExchangeRateForCurrencyTokenerMockRecorder) GetClaims(ctx, tokenString interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClaims", reflect.TypeOf((*MockExchangeRateForCurrencyTokener)(nil).GetClaims), ctx, tokenString)
}

// GetTokenFromRequest mocks base method.
func (m *MockExchangeRateForCurrencyTokener) GetTokenFromRequest(ctx context.Context, r *http.Request) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokenFromRequest", ctx, r)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTokenFromRequest indicates an expected call of GetTokenFromRequest.
func (mr *MockExchangeRateForCurrencyTokenerMockRecorder) GetTokenFromRequest(ctx, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokenFromRequest", reflect.TypeOf((*MockExchangeRateForCurrencyTokener)(nil).GetTokenFromRequest), ctx, r)
}

// MockExchanger is a mock of Exchanger interface.
type MockExchanger struct {
	ctrl     *gomock.Controller
	recorder *MockExchangerMockRecorder
}

// MockExchangerMockRecorder is the mock recorder for MockExchanger.
type MockExchangerMockRecorder struct {
	mock *MockExchanger
}

// NewMockExchanger creates a new mock instance.
func NewMockExchanger(ctrl *gomock.Controller) *MockExchanger {
	mock := &MockExchanger{ctrl: ctrl}
	mock.recorder = &MockExchangerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExchanger) EXPECT() *MockExchangerMockRecorder {
	return m.recorder
}

// Exchange mocks base method.
func (m *MockExchanger) Exchange(ctx context.Context, userID uuid.UUID, fromCurrency, toCurrency string, amount float64) (float32, float64, float64, float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exchange", ctx, userID, fromCurrency, toCurrency, amount)
	ret0, _ := ret[0].(float32)
	ret1, _ := ret[1].(float64)
	ret2, _ := ret[2].(float64)
	ret3, _ := ret[3].(float64)
	ret4, _ := ret[4].(error)
	return ret0, ret1, ret2, ret3, ret4
}

// Exchange indicates an expected call of Exchange.
func (mr *MockExchangerMockRecorder) Exchange(ctx, userID, fromCurrency, toCurrency, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exchange", reflect.TypeOf((*MockExchanger)(nil).Exchange), ctx, userID, fromCurrency, toCurrency, amount)
}
