// Package api Code generated by swaggo/swag. DO NOT EDIT
package api

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/balance": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns balances for all supported currencies",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "wallet"
                ],
                "summary": "Get user balance",
                "responses": {
                    "200": {
                        "description": "User balance",
                        "schema": {
                            "$ref": "#/definitions/handlers.BalanceResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.BalanceErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.BalanceErrorResponse"
                        }
                    }
                }
            }
        },
        "/exchange": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Exchange funds from one currency to another. Checks user balance and updates it accordingly.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "exchange"
                ],
                "summary": "Exchange currency",
                "parameters": [
                    {
                        "description": "Exchange Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.ExchangeRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Exchange successful",
                        "schema": {
                            "$ref": "#/definitions/handlers.ExchangeResponse"
                        }
                    },
                    "400": {
                        "description": "Insufficient funds or invalid currencies",
                        "schema": {
                            "$ref": "#/definitions/handlers.ExchangeErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ExchangeErrorResponse"
                        }
                    }
                }
            }
        },
        "/exchange/rates": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Fetches current exchange rates for all supported currencies",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "exchange"
                ],
                "summary": "Get exchange rates",
                "responses": {
                    "200": {
                        "description": "Exchange rates",
                        "schema": {
                            "$ref": "#/definitions/handlers.ExchangeRatesResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ExchangeRatesErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve exchange rates",
                        "schema": {
                            "$ref": "#/definitions/handlers.ExchangeRatesErrorResponse"
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "description": "Authenticate user and return JWT token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "User login",
                "parameters": [
                    {
                        "description": "Login Request",
                        "name": "loginRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "JWT token returned",
                        "schema": {
                            "$ref": "#/definitions/handlers.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/handlers.LoginErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid username or password",
                        "schema": {
                            "$ref": "#/definitions/handlers.LoginErrorResponse"
                        }
                    }
                }
            }
        },
        "/register": {
            "post": {
                "description": "Creates a new user account. Ensures unique username and email. Password is hashed before storing.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "User registration request",
                        "name": "registerRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User successfully registered",
                        "schema": {
                            "$ref": "#/definitions/handlers.RegisterResponse"
                        }
                    },
                    "400": {
                        "description": "Username or email already exists / invalid request",
                        "schema": {
                            "$ref": "#/definitions/handlers.RegisterErrorResponse"
                        }
                    }
                }
            }
        },
        "/wallet/deposit": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Add funds to user wallet. Validates amount and currency. Updates user balance in the database.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "wallet"
                ],
                "summary": "Deposit funds",
                "parameters": [
                    {
                        "description": "Deposit Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.DepositRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Account topped up successfully",
                        "schema": {
                            "$ref": "#/definitions/handlers.DepositResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid amount or currency",
                        "schema": {
                            "$ref": "#/definitions/handlers.DepositErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.DepositErrorResponse"
                        }
                    }
                }
            }
        },
        "/wallet/withdraw": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Withdraw funds from user wallet. Validates amount and currency. Checks for sufficient funds.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "wallet"
                ],
                "summary": "Withdraw funds",
                "parameters": [
                    {
                        "description": "Withdraw Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.WithdrawRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Withdrawal successful",
                        "schema": {
                            "$ref": "#/definitions/handlers.WithdrawResponse"
                        }
                    },
                    "400": {
                        "description": "Insufficient funds or invalid amount",
                        "schema": {
                            "$ref": "#/definitions/handlers.WithdrawErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.WithdrawErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handlers.BalanceErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "description": "Error message\ndefault: Unauthorized",
                    "type": "string"
                }
            }
        },
        "handlers.BalanceResponse": {
            "type": "object",
            "properties": {
                "balance": {
                    "description": "User balances",
                    "allOf": [
                        {
                            "$ref": "#/definitions/handlers.CurrencyBalance"
                        }
                    ]
                }
            }
        },
        "handlers.CurrencyBalance": {
            "type": "object",
            "properties": {
                "EUR": {
                    "description": "Balance in EUR\ndefault: 50.0",
                    "type": "number"
                },
                "RUB": {
                    "description": "Balance in RUB\ndefault: 5000.0",
                    "type": "number"
                },
                "USD": {
                    "description": "Balance in USD\ndefault: 100.0",
                    "type": "number"
                }
            }
        },
        "handlers.CurrencyBalanceAfterDeposit": {
            "type": "object",
            "properties": {
                "EUR": {
                    "description": "Balance in EUR\ndefault: 50.0",
                    "type": "number"
                },
                "RUB": {
                    "description": "Balance in RUB\ndefault: 5000.0",
                    "type": "number"
                },
                "USD": {
                    "description": "Balance in USD\ndefault: 100.0",
                    "type": "number"
                }
            }
        },
        "handlers.CurrencyBalanceAfterWithdraw": {
            "type": "object",
            "properties": {
                "EUR": {
                    "description": "Balance in EUR\ndefault: 50.0",
                    "type": "number"
                },
                "RUB": {
                    "description": "Balance in RUB\ndefault: 5000.0",
                    "type": "number"
                },
                "USD": {
                    "description": "Balance in USD\ndefault: 100.0",
                    "type": "number"
                }
            }
        },
        "handlers.DepositErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "description": "Error message\ndefault: Invalid amount or currency",
                    "type": "string"
                }
            }
        },
        "handlers.DepositRequest": {
            "type": "object",
            "properties": {
                "amount": {
                    "description": "Amount to deposit\nrequired: true\ndefault: 100.0",
                    "type": "number"
                },
                "currency": {
                    "description": "Currency\nrequired: true\ndefault: USD",
                    "type": "string"
                }
            }
        },
        "handlers.DepositResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "description": "Success message\ndefault: Account topped up successfully",
                    "type": "string"
                },
                "new_balance": {
                    "description": "New balance of the user",
                    "allOf": [
                        {
                            "$ref": "#/definitions/handlers.CurrencyBalanceAfterDeposit"
                        }
                    ]
                }
            }
        },
        "handlers.ExchangeErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "description": "Error message\ndefault: Insufficient funds or invalid currencies",
                    "type": "string"
                }
            }
        },
        "handlers.ExchangeRates": {
            "type": "object",
            "properties": {
                "EUR": {
                    "description": "EUR exchange rate\ndefault: 0.85",
                    "type": "number"
                },
                "RUB": {
                    "description": "RUB exchange rate\ndefault: 90.0",
                    "type": "number"
                },
                "USD": {
                    "description": "USD exchange rate\ndefault: 1.0",
                    "type": "number"
                }
            }
        },
        "handlers.ExchangeRatesErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "description": "Error message\ndefault: Failed to retrieve exchange rates",
                    "type": "string"
                }
            }
        },
        "handlers.ExchangeRatesResponse": {
            "type": "object",
            "properties": {
                "rates": {
                    "description": "Exchange rates",
                    "allOf": [
                        {
                            "$ref": "#/definitions/handlers.ExchangeRates"
                        }
                    ]
                }
            }
        },
        "handlers.ExchangeRequest": {
            "type": "object",
            "properties": {
                "amount": {
                    "description": "Amount to exchange\nrequired: true\ndefault: 100.0",
                    "type": "number"
                },
                "from_currency": {
                    "description": "Source currency\nrequired: true\ndefault: USD",
                    "type": "string"
                },
                "to_currency": {
                    "description": "Target currency\nrequired: true\ndefault: EUR",
                    "type": "string"
                }
            }
        },
        "handlers.ExchangeResponse": {
            "type": "object",
            "properties": {
                "exchanged_amount": {
                    "description": "Amount received after exchange\ndefault: 85.0",
                    "type": "number"
                },
                "message": {
                    "description": "Success message\ndefault: Exchange successful",
                    "type": "string"
                },
                "new_balance": {
                    "description": "New balance after exchange",
                    "allOf": [
                        {
                            "$ref": "#/definitions/handlers.ExchangedBalance"
                        }
                    ]
                }
            }
        },
        "handlers.ExchangedBalance": {
            "type": "object",
            "properties": {
                "EUR": {
                    "description": "Balance in EUR\ndefault: 50.0",
                    "type": "number"
                },
                "RUB": {
                    "description": "Balance in RUB\ndefault: 5000.0",
                    "type": "number"
                },
                "USD": {
                    "description": "Balance in USD\ndefault: 100.0",
                    "type": "number"
                }
            }
        },
        "handlers.LoginErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "description": "Error message\ndefault: Invalid username or password",
                    "type": "string"
                }
            }
        },
        "handlers.LoginRequest": {
            "type": "object",
            "properties": {
                "password": {
                    "description": "Password\nrequired: true\ndefault: secret123",
                    "type": "string"
                },
                "username": {
                    "description": "Username\nrequired: true\ndefault: john_doe",
                    "type": "string"
                }
            }
        },
        "handlers.LoginResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "description": "JWT token\ndefault: JWT_TOKEN",
                    "type": "string"
                }
            }
        },
        "handlers.RegisterErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "description": "Error message\ndefault: Username or email already exists",
                    "type": "string"
                }
            }
        },
        "handlers.RegisterRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "description": "Email\nrequired: true\ndefault: john@example.com",
                    "type": "string"
                },
                "password": {
                    "description": "Password\nrequired: true\ndefault: secret123",
                    "type": "string"
                },
                "username": {
                    "description": "Username\nrequired: true\ndefault: john_doe",
                    "type": "string"
                }
            }
        },
        "handlers.RegisterResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "description": "Success message\ndefault: User registered successfully",
                    "type": "string"
                }
            }
        },
        "handlers.WithdrawErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "description": "Error message\ndefault: Insufficient funds or invalid amount",
                    "type": "string"
                }
            }
        },
        "handlers.WithdrawRequest": {
            "type": "object",
            "properties": {
                "amount": {
                    "description": "Amount to withdraw\nrequired: true\ndefault: 50.0",
                    "type": "number"
                },
                "currency": {
                    "description": "Currency\nrequired: true\ndefault: USD",
                    "type": "string"
                }
            }
        },
        "handlers.WithdrawResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "description": "Success message\ndefault: Withdrawal successful",
                    "type": "string"
                },
                "new_balance": {
                    "description": "New balance of the user",
                    "allOf": [
                        {
                            "$ref": "#/definitions/handlers.CurrencyBalanceAfterWithdraw"
                        }
                    ]
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0.0",
	Host:             "localhost:8080",
	BasePath:         "/api/v1",
	Schemes:          []string{"http"},
	Title:            "gw-currency-wallet API",
	Description:      "Microservice for managing user wallets and currency exchange",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
