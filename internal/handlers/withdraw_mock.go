// Code generated by MockGen. DO NOT EDIT.
// Source: /home/sergey/Github/gw-currency-wallet/internal/handlers/withdraw.go

// Package handlers is a generated GoMock package.
package handlers

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	jwt "github.com/sbilibin2017/gw-currency-wallet/internal/jwt"
)

// MockWithdrawTokener is a mock of WithdrawTokener interface.
type MockWithdrawTokener struct {
	ctrl     *gomock.Controller
	recorder *MockWithdrawTokenerMockRecorder
}

// MockWithdrawTokenerMockRecorder is the mock recorder for MockWithdrawTokener.
type MockWithdrawTokenerMockRecorder struct {
	mock *MockWithdrawTokener
}

// NewMockWithdrawTokener creates a new mock instance.
func NewMockWithdrawTokener(ctrl *gomock.Controller) *MockWithdrawTokener {
	mock := &MockWithdrawTokener{ctrl: ctrl}
	mock.recorder = &MockWithdrawTokenerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWithdrawTokener) EXPECT() *MockWithdrawTokenerMockRecorder {
	return m.recorder
}

// GetClaims mocks base method.
func (m *MockWithdrawTokener) GetClaims(ctx context.Context, tokenString string) (*jwt.Claims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClaims", ctx, tokenString)
	ret0, _ := ret[0].(*jwt.Claims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClaims indicates an expected call of GetClaims.
func (mr *MockWithdrawTokenerMockRecorder) GetClaims(ctx, tokenString interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClaims", reflect.TypeOf((*MockWithdrawTokener)(nil).GetClaims), ctx, tokenString)
}

// GetTokenFromRequest mocks base method.
func (m *MockWithdrawTokener) GetTokenFromRequest(ctx context.Context, r *http.Request) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokenFromRequest", ctx, r)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTokenFromRequest indicates an expected call of GetTokenFromRequest.
func (mr *MockWithdrawTokenerMockRecorder) GetTokenFromRequest(ctx, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokenFromRequest", reflect.TypeOf((*MockWithdrawTokener)(nil).GetTokenFromRequest), ctx, r)
}

// MockWalletWithdrawWriter is a mock of WalletWithdrawWriter interface.
type MockWalletWithdrawWriter struct {
	ctrl     *gomock.Controller
	recorder *MockWalletWithdrawWriterMockRecorder
}

// MockWalletWithdrawWriterMockRecorder is the mock recorder for MockWalletWithdrawWriter.
type MockWalletWithdrawWriterMockRecorder struct {
	mock *MockWalletWithdrawWriter
}

// NewMockWalletWithdrawWriter creates a new mock instance.
func NewMockWalletWithdrawWriter(ctrl *gomock.Controller) *MockWalletWithdrawWriter {
	mock := &MockWalletWithdrawWriter{ctrl: ctrl}
	mock.recorder = &MockWalletWithdrawWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWalletWithdrawWriter) EXPECT() *MockWalletWithdrawWriterMockRecorder {
	return m.recorder
}

// Withdraw mocks base method.
func (m *MockWalletWithdrawWriter) Withdraw(ctx context.Context, userID uuid.UUID, amount float64, currency string) (float64, float64, float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Withdraw", ctx, userID, amount, currency)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(float64)
	ret2, _ := ret[2].(float64)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// Withdraw indicates an expected call of Withdraw.
func (mr *MockWalletWithdrawWriterMockRecorder) Withdraw(ctx, userID, amount, currency interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Withdraw", reflect.TypeOf((*MockWalletWithdrawWriter)(nil).Withdraw), ctx, userID, amount, currency)
}
