// Code generated by MockGen. DO NOT EDIT.
// Source: /home/sergey/Github/gw-currency-wallet/internal/services/exchange.go

// Package services is a generated GoMock package.
package services

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockExchangeRateForCurrencyReader is a mock of ExchangeRateForCurrencyReader interface.
type MockExchangeRateForCurrencyReader struct {
	ctrl     *gomock.Controller
	recorder *MockExchangeRateForCurrencyReaderMockRecorder
}

// MockExchangeRateForCurrencyReaderMockRecorder is the mock recorder for MockExchangeRateForCurrencyReader.
type MockExchangeRateForCurrencyReaderMockRecorder struct {
	mock *MockExchangeRateForCurrencyReader
}

// NewMockExchangeRateForCurrencyReader creates a new mock instance.
func NewMockExchangeRateForCurrencyReader(ctrl *gomock.Controller) *MockExchangeRateForCurrencyReader {
	mock := &MockExchangeRateForCurrencyReader{ctrl: ctrl}
	mock.recorder = &MockExchangeRateForCurrencyReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExchangeRateForCurrencyReader) EXPECT() *MockExchangeRateForCurrencyReaderMockRecorder {
	return m.recorder
}

// GetExchangeRateForCurrency mocks base method.
func (m *MockExchangeRateForCurrencyReader) GetExchangeRateForCurrency(ctx context.Context, fromCurrency, toCurrency string) (float32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExchangeRateForCurrency", ctx, fromCurrency, toCurrency)
	ret0, _ := ret[0].(float32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExchangeRateForCurrency indicates an expected call of GetExchangeRateForCurrency.
func (mr *MockExchangeRateForCurrencyReaderMockRecorder) GetExchangeRateForCurrency(ctx, fromCurrency, toCurrency interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExchangeRateForCurrency", reflect.TypeOf((*MockExchangeRateForCurrencyReader)(nil).GetExchangeRateForCurrency), ctx, fromCurrency, toCurrency)
}

// MockExchangeRateForCurrencyCashReader is a mock of ExchangeRateForCurrencyCashReader interface.
type MockExchangeRateForCurrencyCashReader struct {
	ctrl     *gomock.Controller
	recorder *MockExchangeRateForCurrencyCashReaderMockRecorder
}

// MockExchangeRateForCurrencyCashReaderMockRecorder is the mock recorder for MockExchangeRateForCurrencyCashReader.
type MockExchangeRateForCurrencyCashReaderMockRecorder struct {
	mock *MockExchangeRateForCurrencyCashReader
}

// NewMockExchangeRateForCurrencyCashReader creates a new mock instance.
func NewMockExchangeRateForCurrencyCashReader(ctrl *gomock.Controller) *MockExchangeRateForCurrencyCashReader {
	mock := &MockExchangeRateForCurrencyCashReader{ctrl: ctrl}
	mock.recorder = &MockExchangeRateForCurrencyCashReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExchangeRateForCurrencyCashReader) EXPECT() *MockExchangeRateForCurrencyCashReaderMockRecorder {
	return m.recorder
}

// GetExchangeRateForCurrency mocks base method.
func (m *MockExchangeRateForCurrencyCashReader) GetExchangeRateForCurrency(ctx context.Context, fromCurrency, toCurrency string) (float32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExchangeRateForCurrency", ctx, fromCurrency, toCurrency)
	ret0, _ := ret[0].(float32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExchangeRateForCurrency indicates an expected call of GetExchangeRateForCurrency.
func (mr *MockExchangeRateForCurrencyCashReaderMockRecorder) GetExchangeRateForCurrency(ctx, fromCurrency, toCurrency interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExchangeRateForCurrency", reflect.TypeOf((*MockExchangeRateForCurrencyCashReader)(nil).GetExchangeRateForCurrency), ctx, fromCurrency, toCurrency)
}

// SetExchangeRateForCurrency mocks base method.
func (m *MockExchangeRateForCurrencyCashReader) SetExchangeRateForCurrency(ctx context.Context, fromCurrency, toCurrency string, rate float32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetExchangeRateForCurrency", ctx, fromCurrency, toCurrency, rate)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetExchangeRateForCurrency indicates an expected call of SetExchangeRateForCurrency.
func (mr *MockExchangeRateForCurrencyCashReaderMockRecorder) SetExchangeRateForCurrency(ctx, fromCurrency, toCurrency, rate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetExchangeRateForCurrency", reflect.TypeOf((*MockExchangeRateForCurrencyCashReader)(nil).SetExchangeRateForCurrency), ctx, fromCurrency, toCurrency, rate)
}

// MockWalletWriter is a mock of WalletWriter interface.
type MockWalletWriter struct {
	ctrl     *gomock.Controller
	recorder *MockWalletWriterMockRecorder
}

// MockWalletWriterMockRecorder is the mock recorder for MockWalletWriter.
type MockWalletWriterMockRecorder struct {
	mock *MockWalletWriter
}

// NewMockWalletWriter creates a new mock instance.
func NewMockWalletWriter(ctrl *gomock.Controller) *MockWalletWriter {
	mock := &MockWalletWriter{ctrl: ctrl}
	mock.recorder = &MockWalletWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWalletWriter) EXPECT() *MockWalletWriterMockRecorder {
	return m.recorder
}

// SaveDeposit mocks base method.
func (m *MockWalletWriter) SaveDeposit(ctx context.Context, userID uuid.UUID, amount float64, currency string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveDeposit", ctx, userID, amount, currency)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveDeposit indicates an expected call of SaveDeposit.
func (mr *MockWalletWriterMockRecorder) SaveDeposit(ctx, userID, amount, currency interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveDeposit", reflect.TypeOf((*MockWalletWriter)(nil).SaveDeposit), ctx, userID, amount, currency)
}

// SaveWithdraw mocks base method.
func (m *MockWalletWriter) SaveWithdraw(ctx context.Context, userID uuid.UUID, amount float64, currency string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveWithdraw", ctx, userID, amount, currency)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveWithdraw indicates an expected call of SaveWithdraw.
func (mr *MockWalletWriterMockRecorder) SaveWithdraw(ctx, userID, amount, currency interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveWithdraw", reflect.TypeOf((*MockWalletWriter)(nil).SaveWithdraw), ctx, userID, amount, currency)
}

// MockWalletReader is a mock of WalletReader interface.
type MockWalletReader struct {
	ctrl     *gomock.Controller
	recorder *MockWalletReaderMockRecorder
}

// MockWalletReaderMockRecorder is the mock recorder for MockWalletReader.
type MockWalletReaderMockRecorder struct {
	mock *MockWalletReader
}

// NewMockWalletReader creates a new mock instance.
func NewMockWalletReader(ctrl *gomock.Controller) *MockWalletReader {
	mock := &MockWalletReader{ctrl: ctrl}
	mock.recorder = &MockWalletReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWalletReader) EXPECT() *MockWalletReaderMockRecorder {
	return m.recorder
}

// GetByUserID mocks base method.
func (m *MockWalletReader) GetByUserID(ctx context.Context, userID uuid.UUID) (map[string]float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserID", ctx, userID)
	ret0, _ := ret[0].(map[string]float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserID indicates an expected call of GetByUserID.
func (mr *MockWalletReaderMockRecorder) GetByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserID", reflect.TypeOf((*MockWalletReader)(nil).GetByUserID), ctx, userID)
}
